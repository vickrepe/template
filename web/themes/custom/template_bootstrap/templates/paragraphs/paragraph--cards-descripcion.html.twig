{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{{ attach_library('template_bootstrap/glide_cards') }}
{{ attach_library('template_bootstrap/cards-descripcion') }}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    paragraph.field_bg_color.value ? paragraph.field_bg_color.value|clean_class,
    paragraph.field_diseno_de_columnas.value ? paragraph.field_diseno_de_columnas.value|clean_class
  ]
%}


{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
    <div class="kmm-container container__paragraph-cards">
      <span class="text__label">{{ content.field_label }}</span>
      <span class="text__title">
        {% set hn = content.field_cards_selector_hn[0]['#markup'] %}
        {% set hn_ap = "<" ~ hn ~ ">"  %}
        {% set hn_cl = "</" ~ hn ~ ">" %}
        {% if hn is not empty %}
          {{ hn_ap |raw }}
        {% endif %}
        {{ content.field_title |render|striptags|trim|raw }}
        {% if hn is not empty %}
          {{ hn_cl |raw }}
        {% endif %}
      </span>
      <span class="text__description">{{ content.field_text }}</span>

      {% if is_mobile() %}
      <div class="glide">
        <div class="glide__track" data-glide-el="track">
          <ul class="glide__slides">
            {% for item in content.field_cards['#items'] %}
              <li class="glide__slide">{{ item.entity|view }}</li>
            {% endfor %}
          </ul>
        </div>
        <div class="glide__bullets" data-glide-el="controls[nav]">
         {% for item in content.field_cards['#items'] %}
              <button class="glide__bullet" data-glide-dir="={{loop.index0}}"></button>
         {% endfor %}
        </div>
      </div>
      {% else %}
         {{ content.field_cards }}
      {% endif %}
      {{content.field_link}}

    </div>
    {% endblock %}
  </div>
{% endblock paragraph %}
