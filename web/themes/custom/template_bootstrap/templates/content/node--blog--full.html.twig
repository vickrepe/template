{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}
{{ attach_library('template_bootstrap/blog-full') }}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'short-class',
  ]
%}
<article{{attributes.addClass(classes)}}>
	<header>
		{{ title_prefix }}
		{% if label and not page %}
			<h2{{title_attributes.addClass('node__title')}}>
				<a href="{{ url }}" rel="bookmark">{{ label }}</a>
			</h2>
		{% endif %}
		{{ title_suffix }}
		{% if display_submitted %}
			<div class="node__meta">
				{{ author_picture }}
				{% block submitted %}
					<em{{author_attributes}}>
						{% trans %}Submitted by
						{{ author_name }}
						on
						{{ date }}{% endtrans %}
					</em>
				{% endblock %}
				{{ metadata }}
			</div>
		{% endif %}
	</header>
	<div class="container__hero">
		<div class="container__inside-hero">
			<div class="section__text-hero">
				<div class="text-hero__etiqueta">
					{{content.field_hero_tag}}
				</div>
				<div class="text-hero__title">
					{{content.field_hero_title}}
				</div>
				{{ content.field_hero_texto }}
			</div>
		</div>
		<div class="section__image-hero">
			{{ content.field_media }}
		</div>
	</div>
	<div{{content_attributes.addClass('node__content','clearfix')}}>

		{# Related article ID #}
		{% set target_id = content.field_related_article['#items'].getValue()[0]['target_id'] %}

		{#BREADCRUMB#}
		{% if not is_front and drupal_block('system_breadcrumb_block') is not empty %}
			<div class="container_breadcrumbs kmm-container">
				{{ drupal_block('system_breadcrumb_block') }}
			</div>
		{% endif %}
		{#END#}

		{# CONTENT STARTS#}
		<div class="kmm-container">
			<div class="container__body">
				<div class="row">
					{# Columna primera contien título y body#}
					<div class="col-12 col-lg-8 container__information">
						{#Label before title#}
						<span class="text__tags">{{'ARTICLE'|t}}</span>
						{#title#}
						{{label}}
						{#text of the article#}
						{{content.body}}
					</div>

					{# Columna segunda contiene el bloque de último artículo o artículo relacionado #}
					<div class="col-12 col-lg-4 container__relation-articles">
						<span class="text__tags">{{'BLOG'|t}}</span>
						<span class="text__title">{{'Related articles'|t}}</span>

						<div class="container__blog">
							{{ drupal_view('blog', 'block_1',target_id) }}
						</div>

					</div>
				</div>
			</div>
		</div>

		{{ content|without('field_related_article', 'body', 'field_media', 'field_hero_texto','field_hero_tag','field_hero_title') }}

	</div>
</article>
